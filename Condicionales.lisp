(defun ejercicio1()
    (princ "Cuántos Pantalones Vas A Comprar: ")
    (setq pantalones(read))
    (terpri)
    (when (< pantalones 5)
            (princ "Precio A Menudeo.")
            (terpri)
    )
    (when (and (>= pantalones 5) (< pantalones 12))
        (princ "15% De Descuento En Cada Pantalón.")
        (terpri)
    )
    (when (> pantalones 12)
        (princ "30% De Descuento En Cada Pantalón. ")
        (terpri)
    )
)

(defun ejercicio2 ()
    (print "Nombre: ")
    (setq nombre (read))
    (print "Historia crediticia (b para buena, m para mala): ")
    (setq historial (read))
    (print "Cantidad solicitada: ")
    (setq cantidad (read))
    (print "Salario anual: ")
    (setq salario (read))
    (print "Valor de otras propiedades: ")
    (setq propiedades (read))
    
    (if (and (equal historial 'b) (> (calcular-puntos salario cantidad propiedades) 6))
        (print "¡Felicidades! Calificas para el préstamo.")
        (print "Lo siento, no calificas para el préstamo.")
    )
)

(defun calcular-puntos (salario cantidad propiedades)
    (let ((puntos 0))
        (setq puntos (+ puntos (calcular-puntos-salario salario cantidad)))
        (setq puntos (+ puntos (calcular-puntos-propiedades propiedades cantidad)))
        puntos
    )
)

(defun calcular-puntos-salario (salario cantidad)
    (cond
        ((>= salario (* 0.5 cantidad)) 5)
        ((>= salario (* 0.25 cantidad)) 3)
        ((>= salario (* 0.1 cantidad)) 1)
        (t 0)
    )
)

(defun Ejercicio3()
    (princ "Dame una letra minuscula :")
    (setq letra(read-char))
        (if (equal letra (char-downcase letra))
            (progn 
                (case letra
                ((#\a #\e #\i #\o #\u) (format t "La letra a es una vocal.%" letra))
                (#\y (format t "La letra a es una semivocal.%" letra))
                (t (format t "La letra a es una consonante.%" letra))
                )
            )
            (princ "la letra debe ser minuscula. ") 
        )
)

(defun Ejercicio4()
    (princ "Dame el año para determinar si es bisiesto o no: ")
    (setq año(read))
    (terpri)
    (when (or (and (zerop (mod año 4)) (not (zerop (mod año 100))))
            (zerop (mod año 400)))
            (format t "a es un año bisiesto.%" año)
    )
    (unless (or (and (zerop (mod año 4)) (not (zerop (mod año 100))))
            (zerop (mod año 400)))
            (format t "a no es un año bisiesto.%" año))
)

(defun Ej5()
    (princ "dame el numero de mes: ")
    (setq mes(read))
    (terpri)
    (cond
        ((= mes 2) 28)
        ((member mes '(4 6 9 11)) 30)
        ((member mes '(1 3 5 7 8 10 12)) 31)
        (t "MES ERRONEO")
    )
)
